syntax = "proto3";
package opensource.tab.cache_server;
// Note: go_package here specifies the address of the protocol repository on git, which should not be the same as the git repository address of the service above.
option go_package="github.com/abetterchoice/protoc_event_server";

import "google/api/annotations.proto";

enum ExposureType {
  EXPOSURE_TYPE_UNKNOWN = 0;
  EXPOSURE_TYPE_AUTOMATIC = 1; // sdk Automatically record exposure
  EXPOSURE_TYPE_MANUAL = 2; // Manually record exposure, the developer calls the API to record exposure
}

enum EventServerCode {
  EVENT_SERVER_CODE_SUCCESS = 0;                          // success
  EVENT_SERVER_CODE_NO_PERMISSION = 1001;                 // no permission
  EVENT_SERVER_CODE_TRAFFIC_LIMIT = 1002;                 // traffic limit
  EVENT_SERVER_CODE_INVALID_PROJECT_ID = 1003;            //  projectID error
  EVENT_SERVER_CODE_SERVER_ERR = 1004;                    // server error
  EVENT_SERVER_CODE_INVALID_PARAM = 1005;                 // invalid param
  EVENT_SERVER_CODE_SAME_VERSION = 2001;                  // Version not updated
}

// Exposure Report
message Exposure {
  // Required
  string unit_id = 1; // unitID，The same UnitID stably hits the same experimental version
  int64 group_id = 2; // Experimental version of hit ID
  string project_id = 3; // project ID
  int64 time = 4; // Timestamp, accurate to seconds
  // optional
  string layer_key = 5; // layer key
  string exp_key = 6; // experiment key
  string unit_type = 7; // unitID type, reserved
  string cluster_id = 8; // clusterID Network experiment group ID, reserved for advanced experiments
  string sdk_type = 9; // sdk type golang、cpp、java
  string sdk_version = 10; // sdk version
  ExposureType exposure_type = 11; // ExposureType
  Device device = 12; // End device metadata, optional, can also be passed in via http header
  map<string, string> extra_data = 15; // Extended fields
}

message Device {
  string project_version = 1; // project version
  string platform = 2; // Platform Type Windows/MacOS/iPhone/Android/iPod/iPad/Linux/UNIX/Unknown
  string os_model = 3; // Declare the browser operating system or device type，QQBrowser/UCBrowser
  string os_version = 4; // System platform version
}

// General event reporting
message Event {
  // Required
  string event_name = 1; // event name
  string project_id = 2; // project id
  int64 time = 4; // Timestamp, accurate to seconds
  map<string, string> metadata = 10; // Multiple kv combinations in one log
}

// Event data of buried point monitoring
message MonitorEvent {
  enum status {
    STATUS_SUCCESS = 0; // success
    STATUS_UNEXPECTED = -1; // unexpected
  }
  int64 time = 1; // Timestamp, accurate to seconds
  string ip = 2; // 10.0.0.8
  string project_id = 3; // project id
  string event_name = 4; // event name
  float latency = 5; // latency，unit us
  status status_code = 6; // status
  string message = 7; // Unexpected event error cause, normal event description
  string sdk_type = 8; // sdk type，EG GOLANG\CPP\JAVA\NODEJS\CSHARP
  string sdk_version = 9; // v1.5.18
  string invoke_path = 10; // Event-triggered call path, stack information
  string input_data = 11; // Event input parameters
  string output_data = 12; // Event output information
  map<string, string> ext_info = 13; // Further information
}

message MonitorEventGroup {
  repeated MonitorEvent events = 1; // Multiple monitoring report logs
}

// Batch reporting exposure
message ExposureGroup {
  repeated Exposure exposures = 1; // Multiple exposure records
}

// Batch reporting events
message EventGroup {
  repeated Event events = 1; // Multiple event records
}

message CommonResp {
  EventServerCode code = 1; // error code
  string message = 2; // Detailed description
}

service EventServer {
  rpc LogExposureGroup (ExposureGroup) returns (CommonResp) {
    option (google.api.http) = {
      post: "/v1/exposure_group/log"
      body: "*"
    };
  }; // Batch recording of exposure data
  rpc LogEventGroup (EventGroup) returns (CommonResp) {
    option (google.api.http) = {
      post: "/v1/event_group/log"
      body: "*"
    };
  }; // Batch monitoring event data
  rpc LogMonitorEventGroup (MonitorEventGroup) returns (CommonResp) {
    option (google.api.http) = {
      post: "/v1/monitor_event/log"
      body: "*"
    };
  }; // Batch logging of event data
}
